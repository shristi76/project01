/* body {
    margin: 0;
    font-family: 'Arial', sans-serif;
    color: #333;
    background-color: #f5f5f5;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
}

.header {
    width: 100%;
    height: 50px;
    background-color: #2c3e50;
}

.body {
    max-width: 1200px;
    width: 100%;
    margin: 0 auto;
    padding: 20px;
    box-sizing: border-box;
}

.img {
    position: relative;
    width: 100%;
    height: 300px;
    overflow: hidden;
    border-radius: 10px;
    margin-bottom: 20px;
}

.background-img {
    width: 100%;
    height: 100%;
    object-fit: cover;
    opacity: 0.8;
}

.top-nav {
    display: flex;
    justify-content: space-around;
    background-color: #34495e;
    padding: 15px 0;
    border-radius: 5px;
    margin-bottom: 20px;
}

.nav-item {
    color: white;
    cursor: pointer;
    font-weight: bold;
}

.nav-item:hover {
    color: #1abc9c;
}

.hamburger-menu {
    cursor: pointer;
    display: none;
    flex-direction: column;
    gap: 4px;
}

.hamburger-menu .line {
    width: 25px;
    height: 3px;
    background-color: white;
}

.search-container {
    display: flex;
    flex-direction: column;
    align-items: center;
    background-color: #ecf0f1;
    padding: 20px;
    border-radius: 10px;
    box-shadow: 0 0 20px rgba(0, 0, 0, 0.1);
    margin-bottom: 20px;
}

.search-box {
    display: flex;
    width: 100%;
    margin-bottom: 10px;
}

.input-group {
    display: flex;
    justify-content: space-between;
    width: 100%;
    gap: 10px;
}

.input-field {
    padding: 10px;
    border: 1px solid #bdc3c7;
    border-radius: 5px;
    font-size: 16px;
    box-shadow: 0px 4px 6px rgba(0, 0, 0, 0.1);
    transition: box-shadow 0.3s ease-in-out;
}

.input-field.half-width {
    width: calc(50% - 5px);
}

.input-field:focus {
    outline: none;
    box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.2);
}

.analyze-btn {
    padding: 10px 20px;
    background-color: #2ecc71;
    border: none;
    border-radius: 5px;
    color: white;
    font-size: 16px;
    cursor: pointer;
    transition: background-color 0.3s ease;
    margin-top: 10px;
}

.analyze-btn:hover {
    background-color: #27ae60;
}

.weather-section {
    text-align: center;
    background-color: #e74c3c;
    padding: 20px;
    border-radius: 10px;
    color: white;
    margin-bottom: 20px;
}

.chatbot-container {
    position: fixed;
    bottom: 20px;
    right: 20px;
    display: flex;
    flex-direction: column;
    align-items: flex-end;
}

.chatbot-icon {
    width: 50px;
    cursor: pointer;
    transition: transform 0.3s ease;
}

.chatbot-icon:hover {
    transform: scale(1.1);
}

.chatbot-popup {
    display: none;
    flex-direction: column;
    background-color: white;
    padding: 15px;
    border-radius: 10px;
    box-shadow: 0 0 20px rgba(0, 0, 0, 0.1);
    margin-top: 10px;
    width: 300px;
}

.chatbot-popup.active {
    display: flex;
}

.chat-textarea {
    width: 100%;
    padding: 10px;
    border: 1px solid #bdc3c7;
    border-radius: 5px;
    margin-bottom: 10px;
    resize: none;
    height: 80px;
    font-size: 16px;
}

.send-query-btn {
    padding: 10px;
    background-color: #3498db;
    border: none;
    border-radius: 5px;
    color: white;
    font-size: 16px;
    cursor: pointer;
    transition: background-color 0.3s ease;
}

.send-query-btn:hover {
    background-color: #2980b9;
}

.footer {
    width: 100%;
    background-color: #34495e;
    color: white;
    padding: 15px 0;
    text-align: center;
}

.helpline {
    color: white;
    font-weight: bold;
} */
function toggleMenu() {
    const menu = document.querySelector('.hamburger-menu');
    menu.classList.toggle('active');
  
}
// Function to open and close the chatbot popup
function openChatbot() {
    const popup = document.getElementById('chatbot-popup');
    popup.style.display = (popup.style.display === 'block') ? 'none' : 'block';
}

// Function to handle sending the query (you can expand this to send the query to a server)
function sendQuery() {
    const query = document.getElementById('chat-query').value;
    if (query.trim() !== '') {
        alert('Query sent: ' + query);
        document.getElementById('chat-query').value = ''; // Clear the input
        openChatbot(); // Optionally close the popup after sending
    } else {
        alert('Please enter a query before sending.');
    }
}
// Function to handle the "Analyze" button click
function openAnalyzePage() {
    window.location.href = 'analyze.html',target=_blank; // Change 'analyze.html' to the URL of the page you want to open
}

// Add event listener to the Analyze button
document.getElementById('analyze-btn').addEventListener('click', openAnalyzePage);

document.addEventListener('DOMContentLoaded', function () {
    if (navigator.geolocation) {
        navigator.geolocation.getCurrentPosition(showWeather);
    } else {
        document.getElementById('weather-info').innerText = "Geolocation is not supported by this browser.";
    }
});

function showWeather(position) {
    const lat = position.coords.latitude;
    const lon = position.coords.longitude;
    const apiKey = 'YOUR_API_KEY';
    const apiUrl = `https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lon}&units=metric&appid=${apiKey}`;

    fetch(apiUrl)
        .then(response => response.json())
        .then(data => {
            const temp = data.main.temp;
            const weatherDescription = data.weather[0].description;
            const locationName = data.name;

            document.getElementById('weather-info').innerText = `Location: ${locationName}\nTemperature: ${temp}째C\nCondition: ${weatherDescription}`;
        })
        .catch(error => {
            document.getElementById('weather-info').innerText = "Unable to fetch weather data.";
            console.error("Error fetching weather data: ", error);
        });
}
document.addEventListener('DOMContentLoaded', function () {
    if (navigator.geolocation) {
        navigator.geolocation.getCurrentPosition(showWeather);
    } else {
        document.getElementById('weather-info').innerText = "Geolocation is not supported by this browser.";
    }
});

function showWeather(position) {
    const lat = position.coords.latitude;
    const lon = position.coords.longitude;
    const apiUrl = `/weather?lat=${lat}&lon=${lon}`;

    fetch(apiUrl)
        .then(response => response.json())
        .then(data => {
            const temp = data.main.temp;
            const weatherDescription = data.weather[0].description;
            const locationName = data.name;

            document.getElementById('weather-info').innerText = `Location: ${locationName}\nTemperature: ${temp}째C\nCondition: ${weatherDescription}`;
        })
        .catch(error => {
            document.getElementById('weather-info').innerText = "Unable to fetch weather data.";
            console.error("Error fetching weather data: ", error);
        });
}
document.addEventListener('DOMContentLoaded', function () {
    if (navigator.geolocation) {
        navigator.geolocation.getCurrentPosition(showWeather);
    } else {
        document.getElementById('weather-info').innerText = "Geolocation is not supported by this browser.";
    }
});

function showWeather(position) {
    const lat = position.coords.latitude;
    const lon = position.coords.longitude;
    const apiUrl = `/weather?lat=${lat}&lon=${lon}`;

    fetch(apiUrl)
        .then(response => response.json())
        .then(data => {
            const temp = data.main.temp;
            const weatherDescription = data.weather[0].description;
            const locationName = data.name;

            document.getElementById('weather-info').innerText = `Location: ${locationName}\nTemperature: ${temp}째C\nCondition: ${weatherDescription}`;
        })
        .catch(error => {
            document.getElementById('weather-info').innerText = "Unable to fetch weather data.";
            console.error("Error fetching weather data: ", error);
        });
}
document.addEventListener('DOMContentLoaded', function () {
    if (navigator.geolocation) {
        navigator.geolocation.getCurrentPosition(showWeather);
    } else {
        document.getElementById('weather-info').innerText = "Geolocation is not supported by this browser.";
    }
});

function showWeather(position) {
    const lat = position.coords.latitude;
    const lon = position.coords.longitude;
    const apiKey = 'bfdde316b8b6c043b5420d8b04d8984c';  // Replace 'YOUR_API_KEY' with your actual API key
    const apiUrl = `https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lon}&units=metric&appid=${apiKey}`;
      
    fetch(apiUrl)
        .then(response => response.json())
        .then(data => {
            const temp = data.main.temp;
            const weatherDescription = data.weather[0].description;
            const locationName = data.name;

            document.getElementById('weather-info').innerText = `Location: ${locationName}\nTemperature: ${temp}째C\nCondition: ${weatherDescription}`;
        })
        .catch(error => {
            document.getElementById('weather-info').innerText = "Unable to fetch weather data.";
            console.error("Error fetching weather data: ", error);
        });
}
function analyzeField() {
    const location = document.getElementById('search-input').value;
    const soilType = document.getElementById('soil-type').value;
    const landSize = document.getElementById('land-size').value;

    if (location && soilType && landSize) {
        // You can handle the inputs as needed, e.g., send them to a server or process them locally
        console.log("Location:", location);
        console.log("Soil Type:", soilType);
        console.log("Land Size:", landSize);

        // Example: Redirecting to another page with query parameters
        window.location.href = `analyze.html?location=${encodeURIComponent(location)}&soilType=${encodeURIComponent(soilType)}&landSize=${encodeURIComponent(landSize)}`;
    } else {
        alert("Please fill out all the fields before analyzing.");
    }
}
function toggleDropdown() {
    const dropdownMenu = document.getElementById('dropdown-menu');
    dropdownMenu.style.display = dropdownMenu.style.display === 'block' ? 'none' : 'block';
}

function navigateTo(option) {
    alert(`Navigating to ${option}`);
    // Here you can add the logic to navigate to the respective pages or perform any action
}
